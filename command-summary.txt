Vim Commands
------------
Basic movement

Copy/Paste


============
Git Commands 
------------

Basics
------
- git init <directory>
- git config
- git clone <repo>
- git log
- git add
- git commit -m "<message>"
- git status
- git diff
- git commit --amend

Git Branches
------------
- git branch
- git checkout -b <branch>
- git merge <branch>

Remote Repositories
-------------------
- git remote add <name> <url> (Create a new connection to a remote repo. After adding a remote, you can use <name> as a shortcut for <url> in other commands)
- git fetch <remote> <branch> (Fetches a specific <branch> from the repo. Leave off <branch> to fetch all remote refs.)
- git pull <remote> (Fetch the specified remote's copy of current branch and immediately merge it into the local copy.)
- git push <remote> <branch> (Push the branch to <remote>, along with necessary commits and objects. Creates named branch in the remote repo if it doesn't exist)

Undo Changes
------------
- git revert <commit> (Create new commit that undoes all the changes made in <commit>, then apply it to the current branch.)
- git reset <file> (Remove <file> from the staging area, but leave the working dir unchanged. This unstages a file without overwriting any changes.)
- git clean -n (Shows which files would be removed from working dir. Use the -f flag in place of the -n flag to execute the clean.)

Git Reset
---------
- git reset (Reset staging area to match most recent commit, but leave the working directory unchanged)
- git reset --hard (Reset staging area and working directory to match most recent commit and overwrites all changes in the working dir)
- git reset <commit> (Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working dir alone)
- git reset --hard <commit> (Same as previous, but resets both the staging area & working dir to match. Deletes uncommited changes, and all commits after <commit>

Git Diff
--------
- git diff HEAD (Show difference between working dir and last commit)
- git diff --cached (Show difference between staged changed and last commit)

Git Config
----------
- git config --global user.name <name>
- git config --global user.email <email>
- git config --global alias.<alias-name> <git-command>
- git config --system core.editor <editor>
- git config --global --edit

Git Log
-------
- git log -<limit>
- git log --oneline
- git log -p
- git log --stat (include which files were altered and the relative number of lines that were added or deleted from each of them)
- git log --author="<pattern>" (search for commits by a particular author)
- git log --grep="<pattern>" (Search for commits with a commit message that matches <pattern>
- git log <since>..<until> (Show commits that occur between <since> and <until>. Args can be a commit ID, branch name, HEAD, or any other kind
- git log -- <file> (Only diaplay commits that have the specified file.
- git log --graph --decorate (--decorate adds names of branch or tags of commits shown)

Git Push
--------
- git push <remote> --force (Forces the git push even if it results in a non-fast-forward merge. Do not use the --force flag unless you're absolutely sure you know what you are doing)
- git push <remote> --all (Push all of your local branches to the specified remote)
- git push <remote> --tags (Tags aren't automatically pushed when you push a branch or use the --all flag. The --tags flag sends all of your local tags to the remote repo.


