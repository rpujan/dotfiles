class NQueens {
	constructor (size) {
		if (size < 0) {
			throw RangeError('Invalid board size')
		}
		this.board = new Array(size).fill('.').map(() => new Array(size).fill('.'))
		this.size = size
		this.solutionCount = 0
	}

	isValid ([row, col]) {
		// function to check if the placement of the queen in the given location is valid

		// checking the left of the current row
		for (let i = 0; i < col; i++) {
			if (this.board[row][i] === 'Q') return false
		}

		// checking the upper left diagonal
		for (let i = row, j = col; i >= 0 && j >= 0; i--, j--) {
			if (this.board[i][j] === 'Q') return false
		}

		// checking the lower left diagonal
		for (let i = row, j = col; j >= 0 && i < this.size; i++, j--) {
			if (this.board[i][j] === 'Q') return false
		}

		return true
	}

	placeQueen (row, col) {
		this.board[row][col] = 'Q'
	}

	removeQueen (row, col) {
		this.board[row][col] = '.'
	}

	solve (col = 0) {
		if (col >= this.size) {
			this.solutionCount++
			return true
		}

		for (let i = 0; i < this.size; i++) {
			if (this.isValid([i, col])) {
				this.placeQueen(i, col)
				this.solve(col + 1)
				this.removeQueen(i, col)
			}
		}

		return false
	}

	printBoard (output = value => console.log(value)) {
		if (!output._isMockFunction) {
			output('\n')
		}
		for (const row of this.board) {
			output(row)
		}
	}
}

export { NQueens }

class Sudoku {
	// Sudoku Class to hold the board and related functions
	constructor (board) {
		this.board = board
	}

	findEmptyCell () {
		// Find a empty cell in the board (returns [-1, -1] if all cells are filled)
		for (let i = 0; i < 9; i++) {
			for (let j = 0; j < 9; j++) {
				if (this.board[i][j] === 0) return [i, j]
			}
		}
		return [-1, -1]
	}

	check ([y, x], value) {
		// checks if the value to be added in the board is an acceptable value for the cell

		// checking through the row
		for (let i = 0; i < 9; i++) {
			if (this.board[i][x] === value) return false
		}
		// checking through the column
		for (let i = 0; i < 9; i++) {
			if (this.board[y][i] === value) return false
		}

		// checking through the 3x3 block of the cell
		const secRow = Math.floor(y / 3)
		const secCol = Math.floor(x / 3)
		for (let i = (secRow * 3); i < ((secRow * 3) + 3); i++) {
			for (let j = (secCol * 3); j < ((secCol * 3) + 3); j++) {
				if (y !== i && x !== j && this.board[i][j] === value) return false
			}
		}

		return true
	}

	solve () {
		const [y, x] = this.findEmptyCell()

		// checking if the board is complete
		if (y === -1 && x === -1) return true

		for (let val = 1; val < 10; val++) {
			if (this.check([y, x], val)) {
				this.board[y][x] = val
				if (this.solve()) return true
				// backtracking if the board cannot be solved using current configuration
				this.board[y][x] = 0
			}
		}
		// returning false the board cannot be solved using current configuration
		return false
	}

	getSection (row, [start, end]) {
		return this.board[row].slice(start, end)
	}

	printBoard (output = (...v) => console.log(...v)) {
		// helper function to display board
		for (let i = 0; i < 9; i++) {
			if (i % 3 === 0 && i !== 0) {
				output('- - - - - - - - - - - -')
			}
			output(
				...this.getSection(i, [0, 3]), ' | ',
				...this.getSection(i, [3, 6]), ' | ',
				...this.getSection(i, [6, 9]))
		}
	}
}

export { Sudoku }

class OpenKnightTour {
	constructor (size) {
		this.board = new Array(size).fill(0).map(() => new Array(size).fill(0))
		this.size = size
	}

	getMoves ([i, j]) {
		// helper function to get the valid moves of the knight from the current position
		const moves = [
			[i + 2, j - 1],
			[i + 2, j + 1],
			[i - 2, j - 1],
			[i - 2, j + 1],
			[i + 1, j - 2],
			[i + 1, j + 2],
			[i - 1, j - 2],
			[i - 1, j + 2]
		]

		return moves.filter(([y, x]) => y >= 0 && y < this.size && x >= 0 && x < this.size)
	}

	isComplete () {
		// helper function to check if the board is complete
		return !this.board.map(row => row.includes(0)).includes(true)
	}

	solve () {
		// function to find the solution for the given board
		for (let i = 0; i < this.size; i++) {
			for (let j = 0; j < this.size; j++) {
				if (this.solveHelper([i, j], 0)) return true
			}
		}
		return false
	}

	solveHelper ([i, j], curr) {
		// helper function for the main computation
		if (this.isComplete()) return true

		for (const [y, x] of this.getMoves([i, j])) {
			if (this.board[y][x] === 0) {
				this.board[y][x] = curr + 1
				if (this.solveHelper([y, x], curr + 1)) return true
				// backtracking
				this.board[y][x] = 0
			}
		}
		return false
	}

	printBoard (output = value => console.log(value)) {
		// utility function to display the board
		for (const row of this.board) {
			let string = ''
			for (const elem of row) {
				string += elem + '\t'
			}
			output(string)
		}
	}
}

export { OpenKnightTour }

const sumOfSubset = (set, subset, setindex, sum, targetSum) => {
	// Base case where the subset sum is equal to target sum
	// Evaluation of following subsets on this path will always add up to
	// greater than targetSum, so no need to continue
	if (sum === targetSum) return [subset]

	// This and following subsets on this path will always add up to
	// greater than targetSum, so no need to continue
	if (sum > targetSum) return []

	// Initialize results array. Will contain only valid subsets
	let results = []

	// Slice gets from the set all the elements at the right of the last element
	// to be evaluated (last element of subset)
	// forEach iterated on the resulting array
	set.slice(setindex).forEach((num, index) => {
		// The next subset to be evaluated, current subset plus next element
		const nextSubset = [...subset, num]

		// Next index from the set. Current set index plus iteration index
		// index starts at 0, so a + 1 is required
		const nextSetIndex = setindex + index + 1

		// Sum of elements from the next subset to be evaluated
		const nextSum = sum + num

		// Call recursively the sumOfSubset for the nextSubset
		const subsetResult = sumOfSubset(
			set,
			nextSubset,
			nextSetIndex,
			nextSum,
			targetSum
		)

		// Concat the recursive result with current result array
		results = [...results, ...subsetResult]
	})

	// Return results
	return results
}

export { sumOfSubset }